Index: controller/recipe.controller.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Recipe = require(\"../models/recipe.models\")\nconst Medicine = require(\"../models/medicine.models\")\n\nconst registerRecipe = async (req, res) => {\n    const {\n        name, data_expiration, medicines, pacient,\n    } = req.body\n    const profhealth = req.user._id\n\n    if(!name || !data_expiration || !medicines){\n        return res.status(400).send(\"Todos os campos devem estar preenchidos\")\n    }\n\n    try {\n        for (const medicine of medicines) {\n            const medicamentoExists = await Medicine.findById(medicine.medicine);\n            if (!medicamentoExists) {\n                return res.status(400).send(`Medicamento com ID ${medicine.medicine} não encontrado`);\n            }\n        }\n        const newRecipe = new Recipe({\n            name,\n            data_expiration,\n            medicines,\n            pacient,\n            profhealth\n        })\n        await newRecipe.save();\n        res.status(201).send(newRecipe);\n    }catch (error){\n        res.status(500).send({message: error.message})\n    }\n}\n\nconst getRecipeById = async (req,res) => {\n    const {id} = req.params\n    const userId = req.user._id\n    try {\n        const recipe = await Recipe.findOne({\n            _id: id,\n            $or: [\n                {pacient: userId},\n                {profhealth: userId}\n            ]\n        }).populate(\"medicines.medicine\")\n\n        res.status(200).send(recipe)\n    }catch (error){\n        res.status(500).send({message: error.message})\n    }\n}\n\nconst getAllRecipes = async (req,res) => {\n    const userId = req.user._id;\n\n    try {\n        const recipes = await Recipe.find({\n            $or: [\n                {pacient: userId},\n                {profhealth: userId}\n            ]\n        }).populate(\"medicines.medicine\");\n        res.status(200).send(recipes);\n    }catch (error){\n        res.status(500).send({message: error.message})\n    }\n}\n\nconst startTreatment = async (req, res) => {\n    const { recipe_id, medicine_id, treatment_start } = req.body;\n    const userId = req.user._id;\n    let next_dose;\n\n    if (!recipe_id || !medicine_id) {\n        return res.status(400).send({ message: \"ID Receita e ID Medicamento devem ser enviados\" });\n    }\n\n    try {\n        let recipe = await Recipe.findOne({\n            _id: recipe_id,\n            $or: [\n                { pacient: userId },\n            ]\n        }).populate(\"medicines.medicine\");\n\n        if (!recipe) {\n            return res.status(400).send({ message: \"Receita não encontrada ou não autorizada\" });\n        }\n\n        const medicine = recipe.medicines.find(medicine => medicine._id == medicine_id);\n\n        if (!medicine) {\n            return res.status(400).send({ message: \"Medicamento não encontrado na receita\" });\n        }\n\n        if (medicine.remaining_doses === 0 || recipe.isComplete === true) {\n            return res.status(400).send({ message: \"Tratamento já finalizado\" });\n        }\n\n        if (new Date(treatment_start).toDateString() <= new Date().toDateString()) {\n            return res.status(400).send({ message: \"A data de início do tratamento deve ser futura\" });\n        }\n\n        if (medicine.usage_interval.includes('hours')) {\n            const hours = parseInt(medicine.usage_interval.split(' ')[0]);\n            next_dose = new Date(new Date(treatment_start).setHours(new Date(treatment_start).getHours() + hours));\n        }\n        if (medicine.usage_interval.includes('days')) {\n            const days = parseInt(medicine.usage_interval.split(' ')[0]);\n            next_dose = new Date(new Date(treatment_start).setDate(new Date(treatment_start).getDate() + days));\n        }\n\n        const remaining_doses = medicine.remaining_doses - 1;\n\n        await Recipe.updateOne(\n            { _id: recipe_id, 'medicines._id': medicine_id },\n            {\n                $set: {\n                    'medicines.$.treatment_start': new Date(treatment_start),\n                    'medicines.$.next_dose': next_dose,\n                    'medicines.$.remaining_doses': remaining_doses\n                },\n                $push: {\n                    'medicines.$.dose_history': {\n                        dose_date: new Date(treatment_start),\n                        late: false\n                    }\n                }\n            }\n        );\n\n        res.status(200).send({ message: \"Tratamento iniciado com sucesso\" });\n    } catch (error) {\n        res.status(500).send({ message: error.message });\n    }\n};\n\nconst registerDose = async (req,res) => {\n    try {\n        const { recipe_id, medicine_id, dose_date } = req.body;\n        const userId = req.user._id;\n        let next_dose;\n        let early = false;\n        let late = false;\n        let complete = true;\n\n        if (!recipe_id || !medicine_id || !dose_date) {\n            return res.status(400).send({ message: \"ID Receita e ID Medicamento e data da dose devem ser enviados\" });\n        }\n        let recipe = await Recipe.findOne({\n            _id: recipe_id,\n            $or: [\n                { pacient: userId },\n            ]\n        }).populate(\"medicines.medicine\");\n\n        if (!recipe) {\n            return res.status(400).send({ message: \"Receita não encontrada ou não autorizada\" });\n        }\n        const medicine = recipe.medicines.find(medicine => medicine._id == medicine_id);\n\n        if (!medicine) {\n            return res.status(400).send({ message: \"Medicamento não encontrado na receita\" });\n        }\n\n        if (medicine.remaining_doses === 0 || recipe.isComplete === true) {\n            return res.status(400).send({ message: \"Tratamento já finalizado\" });\n        }\n\n        if(new Date(dose_date) < new Date(medicine.next_dose)){\n            early = true\n        }\n\n        if (medicine.usage_interval.includes('hours')) {\n            const hours = parseInt(medicine.usage_interval.split(' ')[0]);\n            next_dose = new Date(new Date(dose_date).setHours(new Date(dose_date).getHours() + hours));\n            const delay = (new Date(dose_date) - new Date(medicine.next_dose)) / 1000 / 60; // Calcula o atraso em minutos\n            if (delay > 5) {\n                late = true;\n            }\n        }\n        if (medicine.usage_interval.includes('days')) {\n            const days = parseInt(medicine.usage_interval.split(' ')[0]);\n            next_dose = new Date(new Date(dose_date).setDate(new Date(dose_date).getDate() + days));\n            if(new Date(dose_date).getDay() > new Date(medicine.next_dose).getDay()){\n                late = true\n            }\n        }\n\n        const remaining_doses = medicine.remaining_doses - 1;\n\n\n        for (const med of recipe.medicines) {\n            if (med._id == medicine._id) {\n                if (remaining_doses > 0) {\n                    complete = false;\n                    break;\n                }\n            } else if (med.remaining_doses > 0) {\n                complete = false;\n                break;\n            }\n        }\n\n\n\n        recipe = await Recipe.findOneAndUpdate(\n            { _id: recipe_id, 'medicines._id': medicine_id },\n            {\n                $set: {\n                    'medicines.$.next_dose': next_dose,\n                    'medicines.$.remaining_doses': remaining_doses,\n                    isComplete: complete\n                },\n                $push: {\n                    'medicines.$.dose_history': {\n                        dose_date: new Date(dose_date),\n                        late: late,\n                        early: early\n                    }\n                }\n            }, { new: true }\n        );\n\n        if(complete){\n            return res.status(200).send(recipe)\n        }\n\n        res.status(200).send(recipe)\n    }catch (error) {\n        res.status(500).send({ message: error.message });\n    }\n}\n\nmodule.exports = {\n    registerRecipe,\n    getRecipeById,\n    getAllRecipes,\n    startTreatment,\n    registerDose\n}
===================================================================
diff --git a/controller/recipe.controller.js b/controller/recipe.controller.js
--- a/controller/recipe.controller.js	
+++ b/controller/recipe.controller.js	
@@ -202,8 +202,6 @@
             }
         }
 
-
-
         recipe = await Recipe.findOneAndUpdate(
             { _id: recipe_id, 'medicines._id': medicine_id },
             {
